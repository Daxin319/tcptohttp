package headers

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestHeaderParse(t *testing.T) {
	// Test: Valid single header
	headers := NewHeaders()
	data := []byte("Host: localhost:42069\r\n\r\n")
	n, done, err := headers.Parse(data)
	require.NoError(t, err)
	require.NotNil(t, headers)
	assert.Equal(t, "localhost:42069", headers["host"])
	assert.Equal(t, 23, n)
	assert.False(t, done)

	// Test: Invalid spacing header
	headers = NewHeaders()
	data = []byte("       Host : localhost:42069       \r\n\r\n")
	n, done, err = headers.Parse(data)
	require.Error(t, err)
	assert.Equal(t, 0, n)
	assert.False(t, done)

	// Test: Valid header with extra whitespace
	headers = NewHeaders()
	data = []byte("Host:    localhost:42069    \r\n\r\n")
	n, done, err = headers.Parse(data)
	require.NoError(t, err)
	assert.Equal(t, "localhost:42069", headers["host"])
	assert.Equal(t, len(data)-2, n)
	assert.False(t, done)

	// Test: Two Headers with existing map entry
	headers = NewHeaders()
	headers["host"] = "original"
	data = []byte("User-Agent: test\r\nAccept: */*\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.NoError(t, err)
	assert.Equal(t, "original", headers["host"])
	assert.Equal(t, "test", headers["user-agent"])
	assert.Equal(t, "*/*", headers["accept"])
	assert.Equal(t, len(data)-2, n)
	assert.False(t, done)

	// Test: Invalid no colon
	headers = NewHeaders()
	data = []byte("InvalidHeader\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.Error(t, err)
	assert.Equal(t, 0, n)
	assert.False(t, done)

	// Test: Invalid empty field-name
	headers = NewHeaders()
	data = []byte(": value\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.Error(t, err)
	assert.Equal(t, 0, n)
	assert.False(t, done)

	// Test: Invalid, spaces before colon in field-name
	headers = NewHeaders()
	data = []byte("Host : localhost\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.Error(t, err)
	assert.Equal(t, 0, n)
	assert.False(t, done)

	// Test: Field name with space (invalid)
	headers = NewHeaders()
	data = []byte("User Agent: test\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.Error(t, err)
	assert.Equal(t, 0, n)
	assert.False(t, done)

	// Test: Field name with tab (invalid)
	headers = NewHeaders()
	data = []byte("User\tAgent: test\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.Error(t, err)
	assert.Equal(t, 0, n)
	assert.False(t, done)

	// Test: Field name with invalid symbol (@)
	headers = NewHeaders()
	data = []byte("User@Agent: test\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.Error(t, err)
	assert.Equal(t, 0, n)
	assert.False(t, done)

	// Test: Field name with slash (invalid)
	headers = NewHeaders()
	data = []byte("User/Agent: test\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.Error(t, err)
	assert.Equal(t, 0, n)
	assert.False(t, done)

	// Test: Field name with equal sign (invalid)
	headers = NewHeaders()
	data = []byte("User=Agent: test\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.Error(t, err)
	assert.Equal(t, 0, n)
	assert.False(t, done)

	// Test: Field name with allowed special characters (sanity check)
	headers = NewHeaders()
	data = []byte("X-Test_123!#$%&'*+-.^_`|~: value\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.NoError(t, err)
	assert.Equal(t, "value", headers["x-test_123!#$%&'*+-.^_`|~"])
	assert.Equal(t, len(data)-2, n)
	assert.False(t, done)

	// Test: Field name with emoji
	headers = NewHeaders()
	data = []byte("ğŸ”¥-Header: wow\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.Error(t, err)
	assert.Equal(t, 0, n)
	assert.False(t, done)

	// Test: Field name with non-ASCII character
	headers = NewHeaders()
	data = []byte("Ãœser-Agent: test\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.Error(t, err)
	assert.Equal(t, 0, n)
	assert.False(t, done)

	// Test: Emoji in field value (should be allowed)
	headers = NewHeaders()
	data = []byte("x-note: approved âœ…\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.NoError(t, err)
	assert.Equal(t, "approved âœ…", headers["x-note"])
	assert.Equal(t, len(data)-2, n)
	assert.False(t, done)

	// Test: Tab in field value (allowed by spec)
	headers = NewHeaders()
	data = []byte("x-tabbed: value\twith\ttabs\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.NoError(t, err)
	assert.Equal(t, "value\twith\ttabs", headers["x-tabbed"])
	assert.Equal(t, len(data)-2, n)
	assert.False(t, done)

	// Test: Field name with emoji in the middle
	headers = NewHeaders()
	data = []byte("xğŸ”¥note: nope\r\n\r\n")
	n, done, err = headers.Parse(data)
	require.Error(t, err)
	assert.Equal(t, 0, n)
	assert.False(t, done)

}
